# ==================================================================== #
#    tkl functions grammar
# ==================================================================== #
# ==================================================================== 

#Distributed under the terms of the GNU General Public License version 2 
# or any later version.
#  Sámi language technology project 2003-2006, University of Tromsø # 

# Alphabet below must be all multichar symbols used in all rules
STRICT-TAGS +=
    # Tags from lexicon
    N V A Prop Adv Num CC CS Interj
    Abbr ABBR ACR Pr Po Pron Pcle
    Pers Det Dem Refl Recipr Poss Interr
    Nom Acc Gen Dat Instr
    Msc Fem Neu
    Sg Pl Du
    Def Indef
    Cmp Superl Comp
    Prs Prt
    Sg1 Sg2 Sg3 Du1 Du2 Du3 Pl1 Pl2 Pl3
    Neg
    IV TV
    PrfPrc PrsPrc
    Ind Imp Sbj Sup Cond Pot Imprt ImprtII
    Rel Coll NomAg NumAg
    Attr Ord Qst
    Cmpnd RCmpnd SgNomCmp SgGenCmp ShCmp
    CLB PUNCT LEFT RIGHT
    Guess WEB
    Sem/Ani Sem/Fem Sem/Group Sem/Hum Sem/Mal
    Sem/Date Sem/Measr Sem/Money Sem/Obj Sem/Org Sem/Plc
    Sem/Sur Sem/Time Sem/Year
    Post
    # Tags used in syntax
    @SUBJ @<SUBJ @SUBJ> @<OBJ @<IOBJ @OBJ> @IOBJ>
    @SUBJ<ADVL @SUBJ<OBJ
    @OBJ @OBJ>SPRED
    @>N @N< @>A @A< @IM
    @<SPRED @SPRED> @<OPRED @OPRED>
    @PPRED @<PPRED @OPRED @SPRED @SPRED<OBJ
    @+FMAINV @-FMAINV @+FAUXV @-FAUXV @FMV
    @-FSUBJ> @-F<OBJ @SPREF<OBJ
    @-FOBJ @-FOBJ> @-FSUBJ @<-FSUBJ
    @FAUX @IAUX @FS-IAUX @rc-VAUX
    @FS-OBJ
    @FS-ACC>> @FS-ADVL @FS-IMV @FS-N @FS-N<IAUX @FS-STA @FS-N< @FS-N<IMV
    @<ADVL @ADVL> @>ADVL @ADVL @-FADVL @-F<ADVL @-FADVL>
    @ADVL< @ADVL<OBJ @ADVL>CS @ADVL>SUBJ
    @APP-ADVL< @APP-N< @APP-Num< @APP-Pron< @APP>Pron
    @CMPND @COMP-CS<
    @>CC @>Num @>P @>Pron @Pron< @Num<
    @P< @CNP @CVP @>CS @CNP-VP @APP
    @CNP @CVP
    @IMV @ICL-ADVL @ICL-AUX< @ICL-OBJ @ICL-STA
    @HNOUN
    @HAB @VOC
    @INTERJ @PCLE @V
    @CLB
    @X
    <mv> <aux>
    ¶ ?
    V* A*
    @<NP
    @PCLE>

    ;

;

OPTIONS += no-inline-sets ;

# ========== #
# Delimiters #
# ========== #

DELIMITERS = "<.>" "<!>" "<?>" "<...>" "<¶>";

# ============= #
# Tags and sets #
# ============= #

SETS

# I define end of clause and beginning of clause in a way so that the file
# may be read both by the CG-2 and the vislcg formalisms.

LIST BOS = (>>>) (<s>);
LIST EOS = (<<<) (</s>);

# CG3 doesn´t function without >>> and <<< !

# Tags declared as single-membered LISTs 
# ======================================

# Parts of speech
# ---------------

SET CC-CS = CC OR CS ;
LIST QMARK = """ ; # ADD " FOR SYNTAX COLOURING.
LIST COMMA = "," ;

#!! * Sets for POS sub-categories
# ------------------


#!! * Sets for Semantic tags
# -------------

SET FIRSTNAME = (Prop Sem/Fem) OR (Prop Sem/Mal) ;
LIST TIME-N-SET = (N Sem/Time) ;


#!! * Sets for Morphosyntactic properties
# --------------------------


# Derivation
# ----------

# Syntactic tags
# --------------

SET FMAINV = @-FMAINV OR @+FMAINV OR (V @<OBJ) OR (V @N<) OR (V @<SUBJ) OR (V @<ADVL) ;
SET FAUXV = @-FAUXV OR @+FAUXV ;
LIST @ADVL = @ADVL @ADVL> @ADVL< @<ADVL @>ADVL @-F<ADVL ;
SET SUBJ = @<SUBJ OR @SUBJ> OR @SUBJ ;
SET SPRED = @<SPRED OR @SPRED> OR @SPRED ;
SET OPRED = @<OPRED OR @OPRED> OR @OPRED ;
SET OBJ = (@<OBJ) OR (@OBJ>) OR (@OBJ) OR (@-F<OBJ) OR (@-FOBJ>) ;
LIST <OBJ = @-F<OBJ @<OBJ ;
LIST OBJ> = @OBJ> @-FOBJ> ;


# Initials
# --------

LIST INITIAL = "a" "b" "c" "d" "e" "f" "g" "h" "i" "j" "k" "l" "m"
        "n" "o" "p" "q" "r" "s" "t" "u" "v" "w" "x" "y" "z"
        "á" "æ" "ø" "å" "ö" "ä" ;
LIST CAP-INITIAL = "A" "B" "C" "D" "E" "F" "G" "H" "I" "J" "K" "L" "M"
        "N" "O" "P" "Q" "R" "S" "T" "U" "V" "W" "X" "Y" "Z"
        "Á" "Æ" "Ø" "Å" "Ö" "Ä" ;

# Tag sets
# ========
  SETS
# ========


# Word or not
# -----------
LIST WORD = N A Adv V Pron CS CC Po Pr Interj Pcle Num ABBR ACR  \? ;
SET REALWORD = WORD - Num - Ord ;
SET REALWORD-NOTABBR = WORD - Num - Ord - ABBR ;

# Verb sets
# ---------

# Verbs and their complements
# - - - - - - - - - - - - - -

SET NOT-VERB = WORD - V ;

# Finiteness and mood
# - - - - - - - - - -

SET V-IND-FIN = Prs OR Prt ;
#SET V-MOOD = Ind OR Pot OR Imprt OR ImprtII OR Cond OR (Neg Sup) ;
#SET VFIN = V-MOOD - ConNeg ;
#SET VFIN-POS = V-MOOD - ConNeg - Neg ;
#SET VFIN-NOT-IMP = VFIN - Imprt ;
#SET VFIN-NOT-NEG = VFIN - Neg ;
#SET NOT-PRFPRC = WORD - PrfPrc ;

# Person
# - - - - 

LIST V-SG1 = (V Ind Prs Sg1)  (V Ind Prt Sg1) (V Cond Prs Sg1) 
             (V Cond Prt Sg1) (V Pot Prs Sg1) (V Neg Ind Sg1);
LIST V-SG2 = (V Ind Prs Sg2)  (V Ind Prt Sg2) (V Cond Prs Sg2) 
             (V Cond Prt Sg2) (V Pot Prs Sg2) (V Neg Ind Sg2);
LIST V-SG3 = (V Ind Prs Sg3)  (V Ind Prt Sg3) (V Cond Prs Sg3) 
             (V Cond Prt Sg3) (V Pot Prs Sg3) (V Neg Ind Sg3);
LIST V-DU1 = (V Ind Prs Du1)  (V Ind Prt Du1) (V Cond Prs Du1) 
     	     (V Cond Prt Du1) (V Pot Prs Du1) (V Neg Ind Du1);
LIST V-DU2 = (V Ind Prs Du2)  (V Ind Prt Du2) (V Cond Prs Du2) 
	         (V Cond Prt Du2) (V Pot Prs Du2) (V Neg Ind Du2);
LIST V-DU3 = (V Ind Prs Du3)  (V Ind Prt Du3) (V Cond Prs Du3) 
	         (V Cond Prt Du3) (V Pot Prs Du3) (V Neg Ind Du3);
LIST V-PL1 = (V Ind Prs Pl1)  (V Ind Prt Pl1) (V Cond Prs Pl1) 
             (V Cond Prt Pl1) (V Pot Prs Pl1) (V Neg Ind Pl1);
LIST V-PL2 = (V Ind Prs Pl2)  (V Ind Prt Pl2) (V Cond Prs Pl2) 
             (V Cond Prt Pl2) (V Pot Prs Pl2) (V Neg Ind Pl2);
LIST V-PL3 = (V Ind Prs Pl3)  (V Ind Prt Pl3) (V Cond Prs Pl3) 
             (V Cond Prt Pl3) (V Pot Prs Pl3) (V Neg Ind Pl3);
 

# Some subsets of the VFIN sets
# - - - - - - - - - - - - - - -
SET V-SG = V-SG1 OR V-SG2 OR V-SG3 ;
SET V-DU = V-DU1 OR V-DU2 OR V-DU3 ;
SET V-PL = V-PL1 OR V-PL2 OR V-PL3 ;

SET V-DU-PL = V-DU1 OR V-DU2 OR V-DU3 OR V-PL1 OR V-PL2 OR V-PL3 ;


# Pronoun sets
# ------------

# This set is for choosing between Adv and Pron Indef.

# Adjectival sets and their complements
# -------------------------------------

SET NOT-A = WORD - A ;
SET NOT-A-COMMA = WORD - A - COMMA ;
SET NOT-A-PCLE = WORD - A - Pcle ;
SET NOT-A-ADV = WORD - A - Adv ;

# Adverbial sets and their complements
# ------------------------------------
SET LEX-ADV = Adv - (A*) ;
SET NOT-ADV            = WORD - Adv ;
SET NOT-ADV-N          = NOT-ADV - N;
SET NOT-ADV-PCLE       = NOT-ADV - Pcle ;


 # Introduce finite clauses.

LIST TIME-ADV = (Adv Sem/Time) ;

# Coordinators
# ------------

SET CRD = @CNP OR COMMA OR ("/") OR ("-") ;


# Sets of elements with common syntactic behaviour
# ================================================

SETS

#!! * Sets for verbs
# -----

	
SET REAL-V = V ;
SET MAIN-V = V - FAUXV ;
LIST V-TRANS = (V TV) ;
SET TRANS-V = V-TRANS + REAL-V ;
SET VFIN = Prs OR Prt ;

#!! * NP sets defined according to their morphosyntactic features
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

LIST N-SG-NOM = (N Sg Nom) ;
LIST N-NOM = (N Nom) ;
SET HEAD-N = N - RCmpnd ;
SET HEAD-N-NOM = (N Nom) - RCmpnd ;
SET SUBJECTHEAD = N OR A OR Pron - Refl ; # These, can be subject heads
SET NP = N OR A ;                      # anything that can take except numerals
SET NP-HEAD        = Pron OR HEAD-N ;

#!! * The PRE-NP-HEAD family of sets

#!! These sets model noun phrases (NPs). The idea is to first define whatever can
#!! occur in front of the head of the NP, and thereafter negate that with the
#!! expression **WORD - premodifiers**.


#!! * Miscellaneous sets
# ------------------
SET NOT-NUM = WORD - Num ;
SET CARDINALS = Num - Ord ;
SET NOT-CC = WORD - CC ;
SET NOT-PCLE = WORD - Pcle ;
SET REAL-CLB = CLB - COMMA ;
SET NOT-INITIAL-CC = WORD - INITIAL - CC ;

#!! * Border sets and their complements
# ---------------------------------

SET CP = (Pron Interr) OR (Pron Rel) ;
LIST BOUNDARYSYMBOLS =  "\;" ":" "-" "–" ;
SET S-BOUNDARY = CP OR BOUNDARYSYMBOLS OR (Neg Sup) OR @CVP ;
SET BOC = S-BOUNDARY OR BOS ;
SET BOC-PUNCT = BOC - ("-") - ("–") ; 
SET EOC = S-BOUNDARY OR EOS ;
SET NP-BOUNDARY = BOS OR EOS OR REAL-CLB OR VFIN OR Recipr OR Pr OR Pcle OR Interj OR CS OR CP OR @CVP ;

SET APP-BOUNDARY = REAL-CLB OR VFIN OR Recipr OR Pr OR Pcle OR Interj OR CS OR CP OR PrfPrc - @>N ;
SET SV-BOUNDARY = S-BOUNDARY  - FAUXV OR Sup OR FMAINV ;
SET SVF-BOUNDARY = S-BOUNDARY OR VFIN ;


#!! * Syntactic sets
# --------------

LIST ALLSYNTAG = (@+FAUXV) (@+FMAINV) (@-FAUXV) (@-FMAINV) (@-FSUBJ>)(@-FOBJ)(@-F<ADVL)(@-FADVL>)(@>A) (@>ADVL) (@ADVL<) (@<ADVL) (@ADVL>) (@ADVL) (@>N) (@APP) (@APP-N<) (@APP-Pron<) (@APP>Pron) (@APP-Num<) (@APP-ADVL<) (@VOC)(@CNP) (@CVP) (@P<) (@>P) (@HNOUN) (@INTERJ) (@Pron<) (@OBJ) (@OBJ>) (@<OBJ) (@OPRED) (@<OPRED) (@OPRED>) (@SPRED<OBJ) (@PCLE) (@PCLE>) (@COMP-CS<) (@N<) (@SPRED) (@<SPRED) (@SPRED>) (@PPRED) (@Num<) (@SUBJ) (@<SUBJ) (@SUBJ>) (@X) (@<NP);
 

SET NON-APP = ALLSYNTAG - (@APP);

#!! These were the set types.


SECTION         #


MAP:interjection (@INTERJ) TARGET Interj ;
MAP:cconjunction (@CNP @CVP) TARGET CC ;
ADD:sconjunction (@CVP) TARGET CS ;
MAP:oneverbpersentence (@+FMAINV) TARGET VFIN IF (NEGATE *0 V);


MAP:pcle (@PCLE>) TARGET Pcle ;
MAP:interj (@INTERJ) TARGET Interj ;
MAP:p< (@P<) TARGET N OR Pron IF (*-1 Pr BARRIER N OR V);
MAP:d< (@>N) TARGET Det IF (1 N);
MAP:d (@N<) TARGET Dem IF (-1 N)(NOT 1 N);
MAP:n< (@N<) TARGET Post ;
MAP:subj (@SUBJ>) TARGET N  IF (NOT 0 @P<)(*1 V);
MAP:subj (@SUBJ>) TARGET Pron IF (*1 V);
MAP:an (@>N) TARGET A IF (1 N);

MAP:<advl (@<ADVL) TARGET Pr IF (*-1 V);
MAP:advl> (@ADVL>) TARGET Pr IF (*1 V);
MAP:hnoun (@HNOUN) TARGET N IF (NEGATE *0 V);
MAP:<advl (@<ADVL) TARGET Pr IF (*-1 @HNOUN);
MAP:advl> (@ADVL>) TARGET Pr IF (*1 @HNOUN);
MAP:fmv (@FMV) TARGET V ;
MAP:clb (@CLB) TARGET CLB ;

MAP:X (@X) TARGET (*);

AFTER-SECTIONS


	#=====#
      END #
	#=====#
