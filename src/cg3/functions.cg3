# ==================================================================== #
#    tkl functions grammar
# ==================================================================== #
# ==================================================================== 

#Distributed under the terms of the GNU General Public License version 2 
# or any later version.
#  Sámi language technology project 2003-2006, University of Tromsø # 

# Alphabet below must be all multichar symbols used in all rules
STRICT-TAGS +=
    # Tags from lexicon
    N V A Prop Adv Num CC CS Interj
    Abbr ABBR ACR Pr Po Pron Pcle Pre
    Pers Det Dem Refl Recipr Poss Interr
    Nom Acc Gen Dat Instr
    Msc Fem Neu
    Sg Pl Du
    Def Indef
    Cmp Superl Comp
    Prs Prt
    Sg1 Sg2 Sg3 Du1 Du2 Du3 Pl1 Pl2 Pl3
    Neg
    IV TV
    PrfPrc PrsPrc
    Ind Imp Sbj Sup Cond Pot Imprt ImprtII
    Rel Coll NomAg NumAg
    Attr Ord Qst
    Cmpnd RCmpnd SgNomCmp SgGenCmp ShCmp
    CLB PUNCT LEFT RIGHT
    Guess WEB
    Sem/Ani Sem/Fem Sem/Group Sem/Hum Sem/Mal
    Sem/Date Sem/Measr Sem/Money Sem/Obj Sem/Org Sem/Plc
    Sem/Sur Sem/Time Sem/Year
    Post
    # Tags used in syntax
    @SUBJ @<SUBJ @SUBJ> @<OBJ @<IOBJ @OBJ> @IOBJ>
    @SUBJ<ADVL @SUBJ<OBJ
    @OBJ @OBJ>SPRED
    @>N @N< @>A @A< @IM
    @<SPRED @SPRED> @<OPRED @OPRED>
    @PPRED @<PPRED @OPRED @SPRED @SPRED<OBJ
    @NPRED # Nominal predicate John_@SUBJ> teacher_@NPRED
    @PRPRED # Preposition predicate Trond_@SUBJ> in_@NPRED Tromsø_@Pr<
    @+FMAINV @-FMAINV @+FAUXV @-FAUXV @FMV
    @-FSUBJ> @-F<OBJ @SPREF<OBJ
    @-FOBJ @-FOBJ> @-FSUBJ @<-FSUBJ
    @FAUX @IAUX @FS-IAUX @rc-VAUX
    @FS-OBJ
    @FS-ACC>> @FS-ADVL @FS-IMV @FS-N @FS-N<IAUX @FS-STA @FS-N< @FS-N<IMV
    @<ADVL @ADVL> @>ADVL @ADVL @-FADVL @-F<ADVL @-FADVL>
    @ADVL< @ADVL<OBJ @ADVL>CS @ADVL>SUBJ
    @APP-ADVL< @APP-N< @APP-Num< @APP-Pron< @APP>Pron
    @CMPND @COMP-CS<
    @>CC @>Num @>P @>Pron @Pron< @Num<
    @P< @CNP @CVP @>CS @CNP-VP @APP
    @CNP @CVP
    @IMV @ICL-ADVL @ICL-AUX< @ICL-OBJ @ICL-STA
    @HNOUN
    @HAB @VOC
    @INTERJ @PCLE @V
    @CLB
    @X
    <mv> <aux>
    ¶ ?
    V* A*
    @<NP
    @PCLE>    @<PCLE

    ;

;

OPTIONS += no-inline-sets ;

# ========== #
# Delimiters #
# ========== #

DELIMITERS = "<.>" "<!>" "<?>" "<...>" "<¶>";

# ============= #
# Tags and sets #
# ============= #

SETS

# I define end of clause and beginning of clause in a way so that the file
# may be read both by the CG-2 and the vislcg formalisms.

LIST BOS = (>>>) (<s>);
LIST EOS = (<<<) (</s>);

# CG3 doesn´t function without >>> and <<< !

# Tags declared as single-membered LISTs 
# ======================================

# Parts of speech
# ---------------

SET CC-CS = CC OR CS ;
LIST QMARK = """ ; # ADD " FOR SYNTAX COLOURING.
LIST COMMA = "," ;

#!! * Sets for POS sub-categories
# ------------------

LIST PREDPREP = "i" "o" "a" ; # predicative prepositions,
# Pr that may head a sentence without a verb

#!! * Sets for Semantic tags
# -------------

SET FIRSTNAME = (Prop Sem/Fem) OR (Prop Sem/Mal) ;
LIST TIME-N-SET = (N Sem/Time) ;


#!! * Sets for Morphosyntactic properties
# --------------------------


# Derivation
# ----------

# Syntactic tags
# --------------

SET FMAINV = @-FMAINV OR @+FMAINV OR (V @<OBJ) OR (V @N<) OR (V @<SUBJ) OR (V @<ADVL) ;
SET FAUXV = @-FAUXV OR @+FAUXV ;
LIST @ADVL = @ADVL @ADVL> @ADVL< @<ADVL @>ADVL @-F<ADVL ;
SET SUBJ = @<SUBJ OR @SUBJ> OR @SUBJ ;
SET SPRED = @<SPRED OR @SPRED> OR @SPRED ;
SET OPRED = @<OPRED OR @OPRED> OR @OPRED ;
SET OBJ = (@<OBJ) OR (@OBJ>) OR (@OBJ) OR (@-F<OBJ) OR (@-FOBJ>) ;
LIST <OBJ = @-F<OBJ @<OBJ ;
LIST OBJ> = @OBJ> @-FOBJ> ;


# Initials
# --------

LIST INITIAL = "a" "b" "c" "d" "e" "f" "g" "h" "i" "j" "k" "l" "m"
        "n" "o" "p" "q" "r" "s" "t" "u" "v" "w" "x" "y" "z"
        "á" "æ" "ø" "å" "ö" "ä" ;
LIST CAP-INITIAL = "A" "B" "C" "D" "E" "F" "G" "H" "I" "J" "K" "L" "M"
        "N" "O" "P" "Q" "R" "S" "T" "U" "V" "W" "X" "Y" "Z"
        "Á" "Æ" "Ø" "Å" "Ö" "Ä" ;

# Tag sets
# ========
  SETS
# ========


# Word or not
# -----------
LIST WORD = N A Adv V Pron CS CC Po Pr Interj Pcle Num ABBR ACR  \? ;
SET REALWORD = WORD - Num - Ord ;
SET REALWORD-NOTABBR = WORD - Num - Ord - ABBR ;

# Verb sets
# ---------

# Verbs and their complements
# - - - - - - - - - - - - - -

SET NOT-VERB = WORD - V ;

# Finiteness and mood
# - - - - - - - - - -

SET V-IND-FIN = Prs OR Prt ;


# Adjectival sets and their complements
# -------------------------------------

SET NOT-A = WORD - A ;
SET NOT-A-COMMA = WORD - A - COMMA ;
SET NOT-A-PCLE = WORD - A - Pcle ;
SET NOT-A-ADV = WORD - A - Adv ;

# Adverbial sets and their complements
# ------------------------------------
SET NOT-ADV      = WORD - Adv ;
SET NOT-ADV-N    = NOT-ADV - N;
SET NOT-ADV-PCLE = NOT-ADV - Pcle ;

# Introduce finite clauses.

LIST TIME-ADV = (Adv Sem/Time) ;

# Coordinators
# ------------

SET CRD = @CNP OR COMMA OR ("/") OR ("-") ;


# Sets of elements with common syntactic behaviour
# ================================================

SETS

LIST PRE-V-PCLE = "kā" "oioti" "koi" "vave" "oioti" ;
LIST PRE-NUM-PCLE = "vāe" ;
LIST PRE-N-PCLE = "ko" "heā"; # check heā
LIST POST-V-PCLE = "ake" "atu" "ifo" "mai" ;
LIST POST-PR-PCLE = "ei" ;
LIST POST-N-PCLE = "ia" ;
LIST PRE-PROP-PCLE = "ia" ;
LIST POST-X-PCLE = "foki" ;
LIST PRE-PRON-PCLE = "ta" "to" ;



#!! * Sets for verbs
# -----

SET MAIN-V = V - FAUXV ;
LIST V-TRANS = (V TV) ;
SET TRANS-V = V-TRANS + V ;
SET VFIN = Prs OR Prt ;

#!! * Miscellaneous sets
# ------------------
SET NOT-NUM = WORD - Num ;
SET CARDINALS = Num - Ord ;
SET NOT-CC = WORD - CC ;
SET NOT-PCLE = WORD - Pcle ;
SET REAL-CLB = CLB - COMMA ;
SET NOT-INITIAL-CC = WORD - INITIAL - CC ;

#!! * Border sets and their complements
# ---------------------------------

SET CP = (Pron Interr) OR (Pron Rel) ;
LIST BOUNDARYSYMBOLS =  "\;" ":" "-" "–" ;
SET S-BOUNDARY   = CP OR BOUNDARYSYMBOLS OR (Neg Sup) OR @CVP ;
SET BOC          = S-BOUNDARY OR BOS ;
SET BOC-PUNCT    = BOC - ("-") - ("–") ; 
SET EOC          = S-BOUNDARY OR EOS ;
SET NP-BOUNDARY  = BOS OR EOS OR REAL-CLB OR VFIN OR Recipr OR Pr OR Pcle OR Interj OR CS OR CP OR @CVP ;

SET APP-BOUNDARY = REAL-CLB OR VFIN OR Recipr OR Pr OR Pcle OR Interj OR CS OR CP ;
SET SV-BOUNDARY  = S-BOUNDARY  - FAUXV OR FMAINV ;
SET SVF-BOUNDARY = S-BOUNDARY OR VFIN ;
SET NP           = Det | N | Dem | Pron ;
SET PRE-N        = A | Pcle ;
SET NOT-PRE-N    = WORD - PRE-N ;


#!! * Syntactic sets
# --------------

LIST ALLSYNTAG = (@+FAUXV) (@+FMAINV) (@-FAUXV) (@-FMAINV) (@-FSUBJ>)(@-FOBJ)(@-F<ADVL)(@-FADVL>)(@>A) (@>ADVL) (@ADVL<) (@<ADVL) (@ADVL>) (@ADVL) (@>N) (@APP) (@APP-N<) (@APP-Pron<) (@APP>Pron) (@APP-Num<) (@APP-ADVL<) (@VOC)(@CNP) (@CVP) (@P<) (@>P) (@HNOUN) (@INTERJ) (@Pron<) (@OBJ) (@OBJ>) (@<OBJ) (@OPRED) (@<OPRED) (@OPRED>) (@SPRED<OBJ) (@PCLE) (@PCLE>) (@<PCLE) (@COMP-CS<) (@N<) (@SPRED) (@<SPRED) (@SPRED>) (@PPRED) (@Num<) (@SUBJ) (@<SUBJ) (@SUBJ>) (@X) (@<NP);
 

SET NON-APP = ALLSYNTAG - (@APP);

LIST KO = "ko" ;

#!! These were the set types.


SECTION         #


MAP:interjection (@INTERJ) TARGET Interj ;
MAP:cconjunction (@CNP @CVP) TARGET CC ;
ADD:sconjunction (@CVP) TARGET CS ;
MAP:oneverbpersentence (@+FMAINV) TARGET VFIN IF (NEGATE *0 V);

MAP:lprop (@PCLE>) TARGET PRE-PROP-PCLE IF (1 Prop);
MAP:lvpcle (@PCLE>) TARGET PRE-V-PCLE IF (*1 V BARRIER N OR Pr);
MAP:rvpcle (@<PCLE) TARGET POST-V-PCLE IF (-1 V);

MAP:lnpcle (@PCLE>) TARGET PRE-N-PCLE IF (1 NP);
MAP:lpronpcle (@PCLE>) TARGET PRE-PRON-PCLE IF (1 Pron);
MAP:lnumpcle (@PCLE>) TARGET PRE-NUM-PCLE IF (1 Num);
MAP:rnpcle (@<PCLE) TARGET POST-N-PCLE IF (-1 NP);
MAP:rprpcle (@<PCLE) TARGET POST-PR-PCLE IF (-1 Pr);
MAP:rxpcle (@<PCLE) TARGET POST-X-PCLE IF (-1 WORD);

MAP:interj (@INTERJ) TARGET Interj ;
MAP:p< (@P<) TARGET N OR Pron IF (*-1 Pr BARRIER N OR V); 
MAP:d< (@>N) TARGET Det IF (*1 N BARRIER NOT-PRE-N); # til far
MAP:d< (@>N) TARGET Pre IF (*1 N BARRIER NOT-PRE-N);
MAP:d (@N<) TARGET Dem IF (-1 N)(NOT 1 N);
MAP:n< (@N<) TARGET Post ;


# a o possessive og i lokativ kan stå i verbposisjon
# e presensmarkør


MAP:subj (@<SUBJ) TARGET N  IF (*-1 V BARRIER Pr);
MAP:subj (@<SUBJ) TARGET Pron IF (*1 V BARRIER Pr);

MAP:subj (@SUBJ>) TARGET N  IF (NOT 0 @P<)(*1 V);
MAP:subj (@SUBJ>) TARGET Pron IF (*1 V);
MAP:subj (@SUBJ>) TARGET Pron IF (*-1 V BARRIER Pr);
MAP:an (@>N) TARGET A IF (1 N);

MAP:fneg (@+FAUXV) TARGET V IF (0 Neg);
MAP:faux (@+FAUXV) TARGET V IF (0 Prs);

MAP:<advl (@<ADVL) TARGET Pr IF (*-1 V);
MAP:advl> (@ADVL>) TARGET Pr IF (*1 V);

MAP:<advl (@<ADVL) TARGET Pr IF (*-1 @HNOUN);
MAP:<advl (@N<) TARGET Pr IF (*-1 N);

MAP:prpred (@PRPRED) TARGET PREDPREP IF (NOT *0 V);
MAP:npred (@NPRED) TARGET N IF (*1 N BARRIER KO)(NEGATE *-1 N LINK NOT -1 KO)(NOT *0 V); # Lærar Arnfinn


MAP:advl> (@ADVL>) TARGET Pr IF (*1 @HNOUN);

MAP:hnoun (@HNOUN) TARGET N IF (NEGATE *0 V);

MAP:fmv (@FMV) TARGET V ;
MAP:clb (@CLB) TARGET CLB ;

#MAP:X (@X) TARGET (?);
MAP:X (@X) TARGET WORD;

AFTER-SECTIONS


	#=====#
      END #
	#=====#
